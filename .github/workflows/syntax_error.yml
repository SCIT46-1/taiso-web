name: Build Frontend

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  build:                      # 빌드 정의
    if: ${{ github.event.pull_request.merged == true }}   # PR merge 발생하면
    runs-on: ubuntu-latest   # Ubuntu 기반
    defaults:
      run:
        working-directory: frontend   # 작업 폴더 위치
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create .env file    # .env 파일을 생성해서 환경변수를 넣는다.
        run: |
          echo "VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}" > .env
          echo "VITE_NAVER_CLIENT_ID=${{ secrets.VITE_NAVER_CLIENT_ID }}" >> .env
          echo "VITE_KAKAO_CLIENT_ID=${{ secrets.VITE_KAKAO_CLIENT_ID }}" >> .env
          echo "VITE_KAKAO_APP_KEY=${{ secrets.VITE_KAKAO_APP_KEY }}" >> .env
          echo "VITE_WEATHER_API_KEY=${{ secrets.VITE_WEATHER_API_KEY }}" >> .env

      - name: Get latest Git tag (or use default)
        id: get_version
        run: |
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Set up Node.js    # Node.js 18 셋팅
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies   # 의존성 설치
        run: npm install

      - name: Build the project   # 빌드 실행
        run: npm run build

      - name: Archive build output   # 빌드 산출물 압축 (dist 폴더 내부만)
        run: |
          cd dist
          zip -r ../frontend-dist.zip .
          cd ..

      - name: List files after archiving   # 압축 파일이 생성되었는지 확인
        run: ls -al .

      - name: List files in frontend folder
        run: ls -al ${{ github.workspace }}/frontend

      - name: Check if release exists
        id: check_release
        continue-on-error: true
        run: |
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.VERSION }})
          if [[ "$STATUS" == "404" ]]; then
            echo "CREATE_RELEASE=true" >> $GITHUB_ENV
          else
            echo "CREATE_RELEASE=false" >> $GITHUB_ENV
          fi

      - name: Create GitHub Release (if not exists)
        if: ${{ env.CREATE_RELEASE == 'true' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false

      - name: Get release upload URL (if release exists)
        id: get_release_url
        run: |
          RELEASE_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.VERSION }})
          UPLOAD_URL=$(echo "$RELEASE_DATA" | jq -r '.upload_url' | sed 's/{.*}//')
          echo "upload_url=$UPLOAD_URL" >> $GITHUB_OUTPUT

      - name: Upload frontend build to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_url.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/frontend/frontend-dist.zip
          asset_name: frontend/frontend-dist.zip
          asset_content_type: "application/zip"

      - name: Notify on failure
        if: ${{ always() && failure() }}
        run: echo "::warning::Build failed! Please check the logs for more details."
